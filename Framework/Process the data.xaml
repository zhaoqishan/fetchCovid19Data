<Activity mc:Ignorable="sap sap2010" x:Class="Handle_Data" sap2010:ExpressionActivityEditor.ExpressionActivityEditor="C#" sap:VirtualizedContainerService.HintSize="2092,1610" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.Activities.Utils</x:String>
      <x:String>UiPath.Mail.Activities.Business.HtmlEditor</x:String>
      <x:String>UiPath.Mail.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>Microsoft.Exchange.WebServices.Data</x:String>
      <x:String>UiPath.Mail.Exchange</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Mail.Exchange.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>Microsoft.Exchange.WebServices</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Handle_Data" sap:VirtualizedContainerService.HintSize="2102,1545" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="result_data_table" />
      <Variable x:TypeArguments="sd:DataTable" Name="province_result_data_table" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="2060,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Framework\\Get COVID-19 data from Google.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_result_datatable">
          <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">result_data_table</mca:CSharpReference>
        </OutArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_province_case_datatable">
          <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">province_result_data_table</mca:CSharpReference>
        </OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Parallel DisplayName="Parallel Write to Excel" sap:VirtualizedContainerService.HintSize="2060,1299" sap2010:WorkflowViewState.IdRef="Parallel_2">
      <Parallel.Variables>
        <Variable x:TypeArguments="sd:DataTable" Name="result_data_table_for_monthlycase" />
      </Parallel.Variables>
      <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="628,1253" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_2">
        <ueab:ExcelProcessScopeX.Body>
          <ActivityAction x:TypeArguments="ui:IExcelProcess">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="594,1158" sap2010:WorkflowViewState.IdRef="Sequence_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="552,1066" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" WorkbookPath="data\\Raw Data.xlsx">
                <ueab:ExcelApplicationCard.Body>
                  <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="518,788" sap2010:WorkflowViewState.IdRef="Sequence_2">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="476,401" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                        <TryCatch.Try>
                          <ui:InvokeCode Code="DataTable distinctTable = null;&#xA;string cols = string.Empty;&#xA;for (int i = 0; i &lt; inTable.Columns.Count; i++)&#xA;{&#xA;    cols += (inTable.Columns[i].ColumnName + &quot;,&quot;);&#xA;}&#xA;cols = cols.TrimEnd(',');&#xA;string[] columnNames = cols.Split(',');&#xA;if (inTable != null &amp;&amp; inTable.Rows.Count &gt; 0)&#xA;{&#xA;    DataView dv = new DataView(inTable);&#xA;    distinctTable = dv.ToTable(true, columnNames);&#xA;}&#xA;var colName1 = distinctTable.Columns[0].ColumnName;&#xA;var colName2 = distinctTable.Columns[1].ColumnName;&#xA;var sumParam = &quot;sum(&quot; + colName2 + &quot;)&quot;;&#xA;var result = distinctTable.Compute(sumParam, &quot;&quot;);&#xA;var newRow = distinctTable.NewRow();&#xA;newRow[colName1] = &quot;Total:&quot;;&#xA;newRow[colName2] = result;&#xA;distinctTable.Rows.Add(newRow);&#xA;inTable.Clear();&#xA;inTable = distinctTable.Copy();" ContinueOnError="False" DisplayName="Compute Total" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
                            <ui:InvokeCode.Arguments>
                              <InOutArgument x:TypeArguments="sd:DataTable" x:Key="inTable">
                                <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">result_data_table</mca:CSharpReference>
                              </InOutArgument>
                            </ui:InvokeCode.Arguments>
                          </ui:InvokeCode>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,23" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,95" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Error">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <mca:CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">exception</mca:CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                      <Sequence DisplayName="Write New Case" sap:VirtualizedContainerService.HintSize="476,255" sap2010:WorkflowViewState.IdRef="Sequence_8">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ueab:WriteRangeX DisplayName="Write DataTable to Raw Data Excel" ExcludeHeaders="True" sap:VirtualizedContainerService.HintSize="434,163" sap2010:WorkflowViewState.IdRef="WriteRangeX_1" IgnoreEmptySource="False">
                          <ueab:WriteRangeX.Destination>
                            <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                              <mca:CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">Excel.Table["Table2"]</mca:CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Destination>
                          <ueab:WriteRangeX.Source>
                            <InArgument x:TypeArguments="sd:DataTable">
                              <mca:CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">result_data_table</mca:CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Source>
                        </ueab:WriteRangeX>
                      </Sequence>
                    </Sequence>
                  </ActivityAction>
                </ueab:ExcelApplicationCard.Body>
              </ueab:ExcelApplicationCard>
            </Sequence>
          </ActivityAction>
        </ueab:ExcelProcessScopeX.Body>
      </ueab:ExcelProcessScopeX>
      <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="628,1253" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_4">
        <ueab:ExcelProcessScopeX.Body>
          <ActivityAction x:TypeArguments="ui:IExcelProcess">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="594,1158" sap2010:WorkflowViewState.IdRef="Sequence_17">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="552,1066" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_4" WorkbookPath="data\\Raw Data.xlsx">
                <ueab:ExcelApplicationCard.Body>
                  <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="518,788" sap2010:WorkflowViewState.IdRef="Sequence_16">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="476,401" sap2010:WorkflowViewState.IdRef="TryCatch_5">
                        <TryCatch.Try>
                          <ui:InvokeCode Code="DataTable distinctTable = null;&#xA;string cols = string.Empty;&#xA;for (int i = 0; i &lt; inTable.Columns.Count; i++)&#xA;{&#xA;    cols += (inTable.Columns[i].ColumnName + &quot;,&quot;);&#xA;}&#xA;cols = cols.TrimEnd(',');&#xA;string[] columnNames = cols.Split(',');&#xA;if (inTable != null &amp;&amp; inTable.Rows.Count &gt; 0)&#xA;{&#xA;    DataView dv = new DataView(inTable);&#xA;    distinctTable = dv.ToTable(true, columnNames);&#xA;}&#xA;var colName1 = distinctTable.Columns[0].ColumnName;&#xA;var colName2 = distinctTable.Columns[1].ColumnName;&#xA;var colName3 = distinctTable.Columns[2].ColumnName;&#xA;for (int i = 0; i &lt; distinctTable.Rows.Count; i++)&#xA;{&#xA;    var colValue2 = distinctTable.Rows[i][colName2].ToString();&#xA;    var colValue3 = distinctTable.Rows[i][colName3].ToString();&#xA;    colValue2 = colValue2.Replace(&quot;,&quot;,&quot;&quot;);&#xA;    colValue3 = colValue3.Replace(&quot;,&quot;, &quot;&quot;);&#xA;}&#xA;&#xA;var sumParam2 = &quot;sum(&quot; + colName2 + &quot;)&quot;;&#xA;var sumParam3 = &quot;sum(&quot; + colName3 + &quot;)&quot;;&#xA;var result2 = distinctTable.Compute(sumParam2, &quot;&quot;);&#xA;var result3 = distinctTable.Compute(sumParam3, &quot;&quot;);&#xA;var newRow = distinctTable.NewRow();&#xA;newRow[colName1] = &quot;Total:&quot;;&#xA;newRow[colName2] = result2;&#xA;newRow[colName3] = result3;&#xA;distinctTable.Rows.Add(newRow);&#xA;inTable.Clear();&#xA;inTable = distinctTable.Copy();&#xA;" ContinueOnError="False" DisplayName="Distinct Data" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_5" Language="CSharp">
                            <ui:InvokeCode.Arguments>
                              <InOutArgument x:TypeArguments="sd:DataTable" x:Key="inTable">
                                <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">province_result_data_table</mca:CSharpReference>
                              </InOutArgument>
                            </ui:InvokeCode.Arguments>
                          </ui:InvokeCode>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,23" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,95" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Error">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <mca:CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">exception</mca:CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                      <Sequence DisplayName="Write Province Data" sap:VirtualizedContainerService.HintSize="476,255" sap2010:WorkflowViewState.IdRef="Sequence_15">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ueab:WriteRangeX DisplayName="Write Province to Raw Data Excel" ExcludeHeaders="True" sap:VirtualizedContainerService.HintSize="434,163" sap2010:WorkflowViewState.IdRef="WriteRangeX_5" IgnoreEmptySource="False">
                          <ueab:WriteRangeX.Destination>
                            <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                              <mca:CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">Excel.Table["Table1"]</mca:CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Destination>
                          <ueab:WriteRangeX.Source>
                            <InArgument x:TypeArguments="sd:DataTable">
                              <mca:CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">province_result_data_table</mca:CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Source>
                        </ueab:WriteRangeX>
                      </Sequence>
                    </Sequence>
                  </ActivityAction>
                </ueab:ExcelApplicationCard.Body>
              </ueab:ExcelApplicationCard>
            </Sequence>
          </ActivityAction>
        </ueab:ExcelProcessScopeX.Body>
      </ueab:ExcelProcessScopeX>
      <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="590,1253" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_3">
        <ueab:ExcelProcessScopeX.Body>
          <ActivityAction x:TypeArguments="ui:IExcelProcess">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="556,1167" sap2010:WorkflowViewState.IdRef="Sequence_13">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use MonthlyCase Excel File" sap:VirtualizedContainerService.HintSize="514,1075" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_2" WorkbookPath="data\\Monthly Report.xlsx">
                <ueab:ExcelApplicationCard.Body>
                  <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Write Montyly Case" sap:VirtualizedContainerService.HintSize="480,797" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="438,61" sap2010:WorkflowViewState.IdRef="Assign_2">
                        <Assign.To>
                          <OutArgument x:TypeArguments="sd:DataTable">
                            <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">result_data_table_for_monthlycase</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="sd:DataTable">
                            <mca:CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_7">result_data_table</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,401" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                        <TryCatch.Try>
                          <ui:InvokeCode Code="DataTable tempTable = inTable.Copy();&#xA;var colName1 = tempTable.Columns[0].ColumnName;&#xA;var colName2 = tempTable.Columns[1].ColumnName;&#xA;//注意第一行为head&#xA;for (int i = 0; i &lt; tempTable.Rows.Count; i++)&#xA;{&#xA;    var outResult =new DateTime();&#xA;    var orginVal = tempTable.Rows[i][colName1].ToString();&#xA;    if (!DateTime.TryParse(orginVal, out outResult))&#xA;    {&#xA;        continue;&#xA;    }&#xA;    var colVal = outResult.ToString(&quot;yyyy-MM&quot;);&#xA;    tempTable.Rows[i][colName1] = colVal;&#xA;}&#xA;var query = tempTable.AsEnumerable()&#xA;&#x9;.Where(x =&gt; !x.Field&lt;string&gt;(colName1).ToLower().Contains(&quot;total&quot;))&#xA;    .GroupBy(d =&gt; new { date = d.Field&lt;string&gt;(colName1) })&#xA;    .Select(g =&gt; new&#xA;    {&#xA;        date = g.Key.date,&#xA;        caseCount = g.Sum(d =&gt; d.Field&lt;int&gt;(colName2))&#xA;    });&#xA;inTable.Clear();&#xA;foreach (var item in query)&#xA;{&#xA;    var newRow2 = inTable.NewRow();&#xA;    newRow2[colName1] = item.date;&#xA;    newRow2[colName2] = item.caseCount;&#xA;    inTable.Rows.Add(newRow2);&#xA;}&#xA;var sumParam = &quot;sum(&quot; + colName2 + &quot;)&quot;;&#xA;var result = inTable.Compute(sumParam, &quot;&quot;);&#xA;var newRow = inTable.NewRow();&#xA;newRow[colName1] = &quot;Total:&quot;;&#xA;newRow[colName2] = result;&#xA;inTable.Rows.Add(newRow);" ContinueOnError="False" DisplayName="Compute Total" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_2" Language="CSharp">
                            <ui:InvokeCode.Arguments>
                              <InOutArgument x:TypeArguments="sd:DataTable" x:Key="inTable">
                                <mca:CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">result_data_table_for_monthlycase</mca:CSharpReference>
                              </InOutArgument>
                            </ui:InvokeCode.Arguments>
                          </ui:InvokeCode>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,23" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,95" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Error">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <mca:CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_9">exception</mca:CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                      <ueab:WriteRangeX DisplayName="Write DataTable to Monthly Case Excel" ExcludeHeaders="True" sap:VirtualizedContainerService.HintSize="438,163" sap2010:WorkflowViewState.IdRef="WriteRangeX_2" IgnoreEmptySource="False">
                        <ueab:WriteRangeX.Destination>
                          <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                            <mca:CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8">Excel.Table["Table3"]</mca:CSharpValue>
                          </InArgument>
                        </ueab:WriteRangeX.Destination>
                        <ueab:WriteRangeX.Source>
                          <InArgument x:TypeArguments="sd:DataTable">
                            <mca:CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">result_data_table_for_monthlycase</mca:CSharpValue>
                          </InArgument>
                        </ueab:WriteRangeX.Source>
                      </ueab:WriteRangeX>
                    </Sequence>
                  </ActivityAction>
                </ueab:ExcelApplicationCard.Body>
              </ueab:ExcelApplicationCard>
            </Sequence>
          </ActivityAction>
        </ueab:ExcelProcessScopeX.Body>
      </ueab:ExcelProcessScopeX>
    </Parallel>
  </Sequence>
</Activity>